#!/usr/bin/env python3

# Everyone
#	Authenticated users
#	Anonymous

# --NULL
# ANONYMOUS LOGON (user)
# Everyone, NETWORK (group)

# --Guest
# Guest (user)
	# set password
	# no password (any will auth)
# Everyone, NETWORK, Guests (group)



# Read Only IPC$ -> enumerate usernames. impacket-lookupsid - cme --rid-brute
# lsarpc -> impacket-lookupsid - cme --rid-brute

# shares?

import sys
from impacket.smbconnection import SMBConnection
import os

BOLD = '\033[1;31m'
RESET = '\033[0m'
#DUCK = "DOYOULIKEDUCKS"
DUCK = "Guest"

if len(sys.argv) != 2:
	print(f"{BOLD}Use: python3 {sys.argv[0]} <IP>{RESET}")
	exit()

is_null = False
is_guest = False

# Connection_1
try:
	conn = SMBConnection(DUCK, sys.argv[1])
except OSError:
	print(f"{BOLD}Connection error{RESET}")
	exit()
out = 0

# NULL
try:
	conn.login("", "")
	try:
		tree_id = conn.connectTree("IPC$")
		conn.openFile(tree_id, "srvsvc")
		is_null = True
	except:
		pass
except:
	pass

print(f"NetBIOS domain name:\t{BOLD}{conn.getServerDomain()}{RESET}")
print(f"DNS domain name:\t{BOLD}{conn.getServerDNSDomainName()}{RESET}\n")
print(f"NetBIOS computer name:\t{BOLD}{conn.getServerName()}{RESET}")
print(f"FQDN or DNS host name:\t{BOLD}{conn.getServerDNSHostName()}{RESET}\n")

conn.close()

# Connection_2
try:
	conn = SMBConnection(DUCK, sys.argv[1])
except OSError:
	print(f"{BOLD}Connection error{RESET}")
	exit()

# GUEST
try:
	conn.login(DUCK, "")
	try:
		if os.system(f"rpcclient -U '{DUCK}%' {sys.argv[1]} -c 'lookupnames {DUCK}' >/dev/null") == 0:
			is_guest = True
	except:
		pass
#	if conn.isGuestSession() and out == 0:
#		is_guest = True
except:
	pass

conn.close()

# --------

null = "Null session:\t\t"
if is_null:
	print(f"{null}{BOLD}YES{RESET}")
else:
	print(f"{null}No")

guest = "Guest logon:\t\t"
if is_guest:
	print(f"{guest}{BOLD}YES{RESET}")
else:
	print(f"{guest}No")




'''
try:
	tree_id = conn.connectTree("IPC$")
	conn.openFile(tree_id, "srvsvc")
	shares = conn.listShares()
	is_null = True
except:
	pass


cread = "C$ read:\t\t"
try:
	tree_id = conn.connectTree("C$")
	print(f"{cread}{BOLD}YES - SID bruteforce{RESET}")
except:
	print(f"{cread}no")


def list_shares(shares):
        for share in range(len(shares)):
                print(" --",shares[share]['shi1_netname'][:-1])
'''
