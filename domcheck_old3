#!/usr/bin/env python3

import sys
from impacket import nt_errors
from impacket.smbconnection import SMBConnection, SessionError
from impacket.dcerpc.v5.transport import SMBTransport
from impacket.dcerpc.v5.lsad import hLsarOpenPolicy2, POLICY_LOOKUP_NAMES
#from impacket.dcerpc.v5.lsat import DCERPCSessionError, MSRPC_UUID_LSAT, hLsarLookupNames2
#from impacket.dcerpc.v5.samr import DCERPCSessionError, MSRPC_UUID_SAMR, hSamrConnect, hSamrEnumerateDomainsInSamServer, hSamrLookupDomainInSamServer, hSamrOpenDomain, hSamrEnumerateUsersInDomain

from impacket.dcerpc.v5 import lsat
from impacket.dcerpc.v5 import samr


if len(sys.argv) != 2:
	print(f"Use: python3 {sys.argv[0]} <IP>")
	sys.exit(1)

BOLD = '\033[1;31m'
RESET = '\033[0m'
TARGET = sys.argv[1]

'''
CHECK NULL
	bind SRVSVC ??
CHECK GUEST
	bind LSARPC

bind SAMR wo user enum
bind SAMR w user enum

'''

# user, auth, samr
users = {
  "": [False, 0],
  "Guest": [False, 0]
}

# GUEST -----
username = "Guest"
password = ""

conn = SMBTransport(TARGET, filename="lsarpc", username=username, password=password)
dce = conn.get_dce_rpc()

try:
	dce.connect()

	try:
		dce.bind(lsat.MSRPC_UUID_LSAT)
		print("bind LSARPC")
		resp = hLsarOpenPolicy2(dce, POLICY_LOOKUP_NAMES)
		policyHandle = resp['PolicyHandle']
		lsat.hLsarLookupNames2(dce, policyHandle, (username,))
		users["Guest"][0] = True
	except lsat.DCERPCSessionError as e:
		if e.error_code == nt_errors.STATUS_NONE_MAPPED:
			pass
		else:
			print("1 GUEST:", e)

	dce.disconnect()
except OSError:
	print(f"{BOLD}Connection error{RESET}")
	sys.exit(1)
except SessionError as e:
	if e.getErrorCode() == nt_errors.STATUS_ACCOUNT_DISABLED:
		pass
	else:
		print("2 GUEST:", e)


# NULL -------
username = ""
password = ""

try:
	conn = SMBConnection(TARGET, TARGET)
	conn.login(username, password)

	try:
		tree_id = conn.connectTree("IPC$")
		try:
			file_id = conn.openFile(tree_id, "srvsvc")
			users[""][0] = True
			conn.closeFile(tree_id, file_id)
		except SessionError as e:
			if e.getErrorCode() == nt_errors.STATUS_ACCESS_DENIED:
				pass
			conn.disconnectTree(tree_id)
	except Exception as e:
		print("3 NULL:", e)

	conn.close()
except OSError:
	print(f"{BOLD}Connection error{RESET}")
	sys.exit(1)
except SessionError as e:
	if e.getErrorCode() == nt_errors.STATUS_ACCESS_DENIED:
		pass
	else:
		print("4 NULL:", e)
finally:
	host_netbios = conn.getServerName() if conn.getServerName().rstrip('\x00') else "-"
	domain_netbios = conn.getServerDomain() if conn.getServerDomain().rstrip('\x00') else "-"
	host_dns = conn.getServerDNSHostName() if conn.getServerDNSHostName().rstrip('\x00') else "-"
	domain_dns = conn.getServerDNSDomainName() if conn.getServerDomain().rstrip('\x00') else "-"
	is_signing = conn.isSigningRequired()


# SAMR --------
gen = (user for user in users if users[user][0] is True)
for user in gen:
	conn = SMBTransport(TARGET, filename="samr", username=user, password=password)
	dce = conn.get_dce_rpc()

	try:
		dce.connect()

		try:
			dce.bind(samr.MSRPC_UUID_SAMR)
			print("bind SAMR")

			resp = samr.hSamrConnect(dce)
			users[user][1] = 1

			serverHandle = resp['ServerHandle']
			resp = samr.hSamrEnumerateDomainsInSamServer(dce, serverHandle)
			domain = resp['Buffer']['Buffer'][0]['Name']
			resp = samr.hSamrLookupDomainInSamServer(dce, serverHandle, domain)
			resp = samr.hSamrOpenDomain(dce, serverHandle=serverHandle, domainId=resp['DomainId'])
			domainHandle = resp['DomainHandle']
			resp = samr.hSamrEnumerateUsersInDomain(dce, domainHandle, enumerationContext = 0)
			resp['Buffer']['Buffer'][0]

			users[user][1] = 2
		except samr.DCERPCSessionError as e:
			if e.error_code == nt_errors.STATUS_ACCESS_DENIED:
				#pass
				print(e)
			else:
				print("3 GUEST:", e)
		except IndexError:
			pass

		dce.disconnect()
	except SessionError as e:
		if e.getErrorCode() == nt_errors.STATUS_ACCESS_DENIED:
			pass
		else:
			print("5 ALL:", e)

#dce.bind(srvs.MSRPC_UUID_SRVS)
#dce.bind(lsat.MSRPC_UUID_LSAT)
#dce.bind(samr.MSRPC_UUID_SAMR)
#dce.bind(nrpc.MSRPC_UUID_NRPC)

# OUTPUT -------
print(f"NetBIOS computer name\t: {BOLD}{host_netbios}{RESET}")
print(f"NetBIOS domain name\t: {BOLD}{domain_netbios}{RESET}")
print(f"DNS host name\t\t: {BOLD}{host_dns.split('.')[0]}{RESET}")
print(f"DNS domain name\t\t: {BOLD}{domain_dns}{RESET}")
print()

if is_signing:
	print(f"SMB signing\t\t: YES")
else:
	print(f"SMB signing\t\t: {BOLD}NO{RESET}")

if users[""][0]:
	print(f"\nNull session\t\t: {BOLD}YES{RESET}")
	print(f"  LSARPC\t\t: enum4linux")
	if users[""][1] == 1:
		print(f"  SAMR (no user enum)\t: -")
	elif users[""][1] == 2:
		print(f"  SAMR\t\t\t: impacket-samrdump | rpcclient querydispinfo & enumdomusers")

if users["Guest"][0]:
	print(f"\nGuest logon\t\t: {BOLD}YES{RESET}")
	print(f"  LSARPC\t\t: impacket-lookupsid | cme --rid-brute | enum4linux")
	if users["Guest"][1] == 1:
		print(f"  SAMR (no user enum)\t: -")
	elif users["Guest"][1] == 2:
		print(f"  SAMR\t\t\t: impacket-samrdump | rpcclient querydispinfo & enumdomusers")

''' maybe?
Null session            : YES
  SRVSVC                : cme --shares
  LSARPC                : enum4linux
  SAMR, no users        : impacket-samrdump - rpcclient
Guest logon             : NO
'''


''' ToDo
shares
password policy
users / groups - RID
Domain name - SID
printer
'''


''' enum shares
tree_id = conn.connectTree("IPC$")
conn.openFile(tree_id, "srvsvc")
shares = conn.listShares()

def list_shares(shares):
        for share in range(len(shares)):
                print(" --",shares[share]['shi1_netname'][:-1])
'''


''' read C$
conn.listPath("C$", "\*")
'''


'''
# transport -> connection
conn = SMBTransport(TARGET, filename="lsarpc", username=username, password=password)
dce = conn.get_dce_rpc()
dce.connect()

conn = conn.get_smb_connection()
conn.connectTree("IPC$")
conn.getServerName()


# connection -> transport
conn = SMBConnection(TARGET, TARGET)
conn.login(username, password)

conn = SMBTransport(TARGET, filename="samr", smb_connection=conn)
dce = conn.get_dce_rpc()
'''



''' is the same
conn = SMBTransport(TARGET, filename="samr", username=username, password=password)
dce = conn.get_dce_rpc()
dce.connect()

conn = SMBConnection(TARGET, TARGET)
conn.login(username, password)
tree_id = conn.connectTree("IPC$")
file_id = conn.openFile(tree_id, "samr")
'''


'''
srvsvc	shares
lsarpc	domain, users, SID
samr	domain, users, password policy
spoolss	printer
'''
