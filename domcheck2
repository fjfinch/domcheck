#!/usr/bin/env python3

import sys
from impacket import smbconnection
from impacket.dcerpc.v5 import transport, lsat, lsad, srvs

if len(sys.argv) != 2:
	print(f"Use: python3 {sys.argv[0]} <IP>")
	sys.exit(1)

BOLD = '\033[1;31m'
RESET = '\033[0m'
TARGET = sys.argv[1]

is_null = False
#is_null_read = False
is_guest = False
is_guest2 = False

# NULL -------
username = ""
password = ""

try:
	conn = smbconnection.SMBConnection(TARGET, TARGET)
except OSError:
	print(f"{BOLD}Connection error{RESET}")
	sys.exit(1)

try:
	conn.login(username, password)
	try:
		tree_id = conn.connectTree("IPC$")
		conn.openFile(tree_id, "srvsvc")
		is_null = True
		conn.disconnectTree(tree_id)
	except:
		pass
#	try:
#		test = conn.listPath("IPC$", "\*")
#		is_null_read = True
#	except:
#		pass
except smbconnection.SessionError:
	pass
finally:
	print(f"NetBIOS domain name:\t{BOLD}{conn.getServerDomain()}{RESET}")
	print(f"DNS domain name:\t{BOLD}{conn.getServerDNSDomainName()}{RESET}")
	print(f"NetBIOS computer name:\t{BOLD}{conn.getServerName()}{RESET}")
	print(f"DNS host name:\t\t{BOLD}{conn.getServerDNSHostName()}{RESET}")
	print()

conn.close()

# GUEST ------
username = "Guest"
password = ""

try:
	test = transport.SMBTransport(TARGET, filename = "lsarpc", username = username, password = password)
	dce = test.get_dce_rpc()
	dce.connect()
	is_guest2 = True

	try:
		dce.bind(lsat.MSRPC_UUID_LSAT)
		resp = lsad.hLsarOpenPolicy2(dce, lsad.POLICY_LOOKUP_NAMES)
		policyHandle = resp['PolicyHandle']
		lsat.hLsarLookupNames2(dce, policyHandle, (username,))
		is_guest = True
	except:
		pass

	dce.disconnect()
except smbconnection.SessionError:
	pass

# OUTPUT -----
if is_null:
	print(f"Null session:\t\t{BOLD}YES (shares | rpcclient){RESET}")
else:
	print(f"Null session:\t\tNo")

if is_guest:
	print(f"Guest logon:\t\t{BOLD}YES (shares | CME --rid-brute | impacket-lookupsid){RESET}")
else:
	print(f"Guest logon:\t\tNo")

if is_guest2:
        print(f"Guest2 logon:\t\t{BOLD}YES{RESET}")
else:
        print(f"Guest2 logon:\t\tNo")







'''
try:
	tree_id = conn.connectTree("IPC$")
	conn.openFile(tree_id, "srvsvc")
	shares = conn.listShares()
except:
	pass


def list_shares(shares):
	for share in range(len(shares)):
		print(" --",shares[share]['shi1_netname'][:-1])


cread = "C$ read:\t\t"
try:
	tree_id = conn.connectTree("C$")
	print(f"{cread}{BOLD}YES - SID bruteforce{RESET}")
except:
	print(f"{cread}no")

domainSid = resp['ReferencedDomains']['Domains'][0]['Sid'].formatCanonical()
'''
